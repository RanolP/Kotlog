buildscript {
    ext.kotlin_version = '1.2.51'

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url = 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath group: 'com.eriwen', name: 'gradle-js-plugin', version: '2.14.1'
        classpath group: 'com.moowork.gradle', name: 'gradle-node-plugin', version: '1.2.0'
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: kotlin_version
    }
}

plugins {
    id 'maven'
    id 'maven-publish'
}

allprojects {
    group 'io.github.kotlinmp'
    version '1.0.1'
}

def pomConfig = {
    name 'kotlog'
    artifactId 'kotlog'
    description project.description
    inceptionYear 2018
    licenses {
        license {
            name 'MIT License'
            url 'https://opensource.org/licenses/MIT'
            distribution 'repo'
        }
    }

    developers {
        developer {
            id 'RanolP'
            name 'Ranol'
            email 'asdhugh1@gmail.com'
            url 'https://ranolp.github.io/'
            roles {
                role 'developer'
            }
            timezone 'Asia/Seoul'
        }
    }

    scm {
        connection 'scm:git:https://github.com/kotlinmp/Kotlog.git'
        developerConnection 'scm:git:https://github.com/kotlinmp/Kotlog.git'
        url 'https://github.com/kotlinmp/Kotlog'
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from project(':jvm').components.java
            artifact project(':jvm').shadowJar
            artifact project(':jvm').sourcesJar
            artifact project(':jvm').dokkaJar
            groupId project.group
            artifactId 'kotlog'
            version project.version
            pom.withXml {
                def root = asNode()
                root.dependencies.'*'.findAll() {
                    it.groupId.text() == 'io.github.kotlinmp'
                }.each() {
                    it.parent().remove(it)
                }
                root.children().last() + pomConfig
            }
        }
    }
}

model {
    tasks.generatePomFileForMyPublicationPublication {
        destination = file("${project(':jvm').buildDir}/libs/kotlog-${project.version}.pom")
    }
}


task prepareUpload(type: Copy, dependsOn: [':jvm:build', 'generatePomFileForMyPublicationPublication']) {
    from 'jvm/build/libs'
    into "build/upload/io/github/kotlinmp/kotlog/${project.version}"
    include "jvm-${project.version}.jar"
    include "jvm-${project.version}-sources.jar"
    include "jvm-${project.version}-javadoc.jar"
    include "kotlog-${project.version}.pom"
    rename "jvm-${project.version}.jar", "kotlog-${project.version}.jar"
    rename "jvm-${project.version}-sources.jar", "kotlog-${project.version}-sources.jar"
    rename "jvm-${project.version}-javadoc.jar", "kotlog-${project.version}-javadoc.jar"
}
